/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sangraama.thrift.transmissionservice;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class PlayerTransmissionService {

    public interface Iface {

        public void passPlayer(org.sangraama.thrift.assets.TPlayer player)
                throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void passPlayer(
                org.sangraama.thrift.assets.TPlayer player,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.passPlayer_call> resultHandler)
                throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot,
                      org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void passPlayer(org.sangraama.thrift.assets.TPlayer player)
                throws org.apache.thrift.TException {
            send_passPlayer(player);
        }

        public void send_passPlayer(org.sangraama.thrift.assets.TPlayer player)
                throws org.apache.thrift.TException {
            passPlayer_args args = new passPlayer_args();
            args.setPlayer(player);
            sendBase("passPlayer", args);
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
            AsyncIface {
        public static class Factory implements
                org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(
                    org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                           org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void passPlayer(org.sangraama.thrift.assets.TPlayer player,
                               org.apache.thrift.async.AsyncMethodCallback<passPlayer_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            passPlayer_call method_call = new passPlayer_call(player, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class passPlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private org.sangraama.thrift.assets.TPlayer player;

            public passPlayer_call(org.sangraama.thrift.assets.TPlayer player,
                                   org.apache.thrift.async.AsyncMethodCallback<passPlayer_call> resultHandler,
                                   org.apache.thrift.async.TAsyncClient client,
                                   org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                                   org.apache.thrift.transport.TNonblockingTransport transport)
                    throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.player = player;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                    throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passPlayer",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                passPlayer_args args = new passPlayer_args();
                args.setPlayer(player);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                        .getProtocol(memoryTransport);
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
            implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(
                    iface,
                    getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(
                I iface,
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("passPlayer", new passPlayer());
            return processMap;
        }

        public static class passPlayer<I extends Iface> extends
                org.apache.thrift.ProcessFunction<I, passPlayer_args> {
            public passPlayer() {
                super("passPlayer");
            }

            public passPlayer_args getEmptyArgsInstance() {
                return new passPlayer_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, passPlayer_args args)
                    throws org.apache.thrift.TException {
                iface.passPlayer(args.player);
                return null;
            }
        }

    }

    public static class passPlayer_args implements
            org.apache.thrift.TBase<passPlayer_args, passPlayer_args._Fields>,
            java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "passPlayer_args");

        private static final org.apache.thrift.protocol.TField PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "player", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new passPlayer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new passPlayer_argsTupleSchemeFactory());
        }

        public org.sangraama.thrift.assets.TPlayer player; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PLAYER((short) 1, "player");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PLAYER
                        return PLAYER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.PLAYER, new org.apache.thrift.meta_data.FieldMetaData("player",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(
                            org.apache.thrift.protocol.TType.STRUCT,
                            org.sangraama.thrift.assets.TPlayer.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passPlayer_args.class,
                    metaDataMap);
        }

        public passPlayer_args() {
        }

        public passPlayer_args(org.sangraama.thrift.assets.TPlayer player) {
            this();
            this.player = player;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public passPlayer_args(passPlayer_args other) {
            if (other.isSetPlayer()) {
                this.player = new org.sangraama.thrift.assets.TPlayer(other.player);
            }
        }

        public passPlayer_args deepCopy() {
            return new passPlayer_args(this);
        }

        @Override
        public void clear() {
            this.player = null;
        }

        public org.sangraama.thrift.assets.TPlayer getPlayer() {
            return this.player;
        }

        public passPlayer_args setPlayer(org.sangraama.thrift.assets.TPlayer player) {
            this.player = player;
            return this;
        }

        public void unsetPlayer() {
            this.player = null;
        }

        /**
         * Returns true if field player is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPlayer() {
            return this.player != null;
        }

        public void setPlayerIsSet(boolean value) {
            if (!value) {
                this.player = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PLAYER:
                    if (value == null) {
                        unsetPlayer();
                    } else {
                        setPlayer((org.sangraama.thrift.assets.TPlayer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PLAYER:
                    return getPlayer();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PLAYER:
                    return isSetPlayer();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            return that instanceof passPlayer_args && this.equals((passPlayer_args) that);
        }

        public boolean equals(passPlayer_args that) {
            if (that == null)
                return false;

            boolean this_present_player = true && this.isSetPlayer();
            boolean that_present_player = true && that.isSetPlayer();
            if (this_present_player || that_present_player) {
                if (!(this_present_player && that_present_player))
                    return false;
                if (!this.player.equals(that.player))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(passPlayer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            passPlayer_args typedOther = (passPlayer_args) other;

            lastComparison = Boolean.valueOf(isSetPlayer()).compareTo(typedOther.isSetPlayer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlayer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.player,
                        typedOther.player);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("passPlayer_args(");
            boolean first = true;

            sb.append("player:");
            if (this.player == null) {
                sb.append("null");
            } else {
                sb.append(this.player);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (player != null) {
                player.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
                ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class passPlayer_argsStandardSchemeFactory implements SchemeFactory {
            public passPlayer_argsStandardScheme getScheme() {
                return new passPlayer_argsStandardScheme();
            }
        }

        private static class passPlayer_argsStandardScheme extends StandardScheme<passPlayer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, passPlayer_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PLAYER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.player = new org.sangraama.thrift.assets.TPlayer();
                                struct.player.read(iprot);
                                struct.setPlayerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                        schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, passPlayer_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.player != null) {
                    oprot.writeFieldBegin(PLAYER_FIELD_DESC);
                    struct.player.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class passPlayer_argsTupleSchemeFactory implements SchemeFactory {
            public passPlayer_argsTupleScheme getScheme() {
                return new passPlayer_argsTupleScheme();
            }
        }

        private static class passPlayer_argsTupleScheme extends TupleScheme<passPlayer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, passPlayer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlayer()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPlayer()) {
                    struct.player.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, passPlayer_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.player = new org.sangraama.thrift.assets.TPlayer();
                    struct.player.read(iprot);
                    struct.setPlayerIsSet(true);
                }
            }
        }

    }

}
